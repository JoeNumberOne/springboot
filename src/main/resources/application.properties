#web请求端口
server.port=8080
# REDIS (RedisProperties)
# Redis数据库索引（默认为0）
spring.redis.database=0
# Redis服务器地址
spring.redis.host=10.227.115.106
# Redis服务器连接端口
spring.redis.port=6379
# 连接池最大连接数（使用负值表示没有限制）
spring.redis.pool.max-active=30
# 连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.pool.max-wait=-1
# 连接池中的最大空闲连接
spring.redis.pool.max-idle=10
# 连接池中的最小空闲连接
spring.redis.pool.min-idle=1
# 连接超时时间（毫秒）
spring.redis.timeout=5000
#哨兵的配置列表
#spring.redis.sentinel.master=mymaster
#spring.redis.sentinel.nodes=10.118.159.20:26179,10.118.159.20:26279
#mybatis
mybatis.mapper-locations=classpath*:mapper/*.xml
mybatis.type-aliases-package=com.joe.entity
# 开启驼峰命名
mybatis.configuration.map-underscore-to-camel-case=true
# 数据库配置
#spring.datasource.druid.type=com.alibaba.druid.pool.DruidDataSource
## druid
#spring.datasource.druid.driver-class-name=com.mysql.jdbc.Driver
#spring.datasource.druid.url=jdbc:mysql:10.227.115.106:3306/ssm?characterEncoding=UTF-8
#spring.datasource.druid.username=root
#spring.datasource.druid.password=123456
#spring.datasource.druid.initial-size=5
#spring.datasource.druid.min-idle=5
#spring.datasource.druid.max-active=20
#spring.datasource.druid.max-wait=60000
#spring.datasource.druid.time-between-eviction-runs-millis=60000
#spring.datasource.druid.min-evictable-idle-time-millis=300000
#spring.datasource.druid.validation-query=SELECT 1 FROM DUAL
#spring.datasource.druid.test-while-idle=true
#spring.datasource.druid.test-on-borrow=false
#spring.datasource.druid.test-on-return=false
#spring.datasource.druid.pool-prepared-statements=true
## 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
#spring.datasource.druid.filters=stat,wall
#spring.datasource.druid.max-pool-prepared-statement-per-connection-size=20
#spring.datasource.druid.use-global-data-source-stat=true
#spring.datasource.druid.connection-properties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500

##################    JDBC 配置    ################
#数据库配置
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.druid.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.druid.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.druid.url=jdbc:mysql:10.227.115.106:3306/ssm
spring.datasource.druid.username=root
spring.datasource.druid.password=123456
##################    连接池配置    ################
#连接池建立时创建的初始化连接数
spring.datasource.druid.initial-size=5
#连接池中最大的活跃连接数
spring.datasource.druid.max-active=20
#连接池中最小的活跃连接数
spring.datasource.druid.min-idle=5
# 配置获取连接等待超时的时间
spring.datasource.druid.max-wait=60000
# 打开PSCache，并且指定每个连接上PSCache的大小
spring.datasource.druid.pool-prepared-statements=true
spring.datasource.druid.max-pool-prepared-statement-per-connection-size=20
#spring.datasource.druid.max-open-prepared-statements= #和上面的等价
spring.datasource.druid.validation-query=SELECT 1 FROM DUAL
spring.datasource.druid.validation-query-timeout=30000
#是否在获得连接后检测其可用性
spring.datasource.druid.test-on-borrow=false
#是否在连接放回连接池后检测其可用性
spring.datasource.druid.test-on-return=false
#是否在连接空闲一段时间后检测其可用性
spring.datasource.druid.test-while-idle=true
#spring.datasource.druid.time-between-eviction-runs-millis=
#spring.datasource.druid.min-evictable-idle-time-millis=
#spring.datasource.druid.max-evictable-idle-time-millis=

#rabbitmq相关配置
spring.rabbitmq.host=10.227.115.106
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest


#shardingJdbc 分库分表
##==========================只支持分片配置=====start======================================
##数据源的名称，多个以短号隔开
##数据源的配置
#sharding.jdbc.datasource.names=ds
#sharding.jdbc.datasource.ds.type=com.alibaba.druid.pool.DruidDataSource
#sharding.jdbc.datasource.ds.driver-class-name=com.microsoft.sqlserver.jdbc.SQLServerDriver
#sharding.jdbc.datasource.ds.url=jdbc:sqlserver://mhstlogsqlpass01.database.chinacloudapi.cn:1433;databaseName=TMS_REFACTOR
#sharding.jdbc.datasource.ds.username=itm
#sharding.jdbc.datasource.ds.password=F1i426A6y351
###默认的数据库分片策略，如果没有指定具体某个数据库的分片策略，那么使用默认分片策略
#sharding.jdbc.config.sharding.default-database-strategy.inline.sharding-column=id
#sharding.jdbc.config.sharding.default-database-strategy.inline.algorithm-expression=ds
###id.intdiv(2) % 2 : 根据id进行分片，先对数据库数量进行取余，在对表数量进行取模。这个作用是让数据可以更加均匀的分布在不同表中。
###$->{0..1}  是行表达式标识符，uc$->{0..1}表示uc0,uc1
#sharding.jdbc.config.sharding.tables.itm_gps_position.actual-data-nodes=ds.itm_gps_position_$->{0..2}
#sharding.jdbc.config.sharding.tables.itm_gps_position.table-strategy.inline.sharding-column=transfer_bill_id
#sharding.jdbc.config.sharding.tables.itm_gps_position.table-strategy.inline.algorithm-expression=itm_gps_position_$->{transfer_bill_id % 3}
##是否开启SQL显示，默认值: false
#sharding.jdbc.config.sharding.props.sql.show=true
#sharding.jdbc.config.sharding.tables.itm_gps_position.keyGeneratorColumnName=id
##==========================只支持分片配置======end=====================================

# Dubbo Config properties
## ApplicationConfig Bean 没用到 先注释
#dubbo.application.name=test
### ProtocolConfig Bean
#dubbo.protocol.name=dubbo
#dubbo.protocol.port=20888
#dubbo.protocol.threads=300
### RegistryConfig Bean
#dubbo.registry.address=10.227.115.106:2181
#dubbo.registry.client=zkclient
#dubbo.registry.protocol=zookeeper
#dubbo.registry.register=true
#dubbo.registry.version=2.0.0.maqiao
#dubbo.registry.timeout=60000
#dubbo.provider.delay=-1
#dubbo.consumer.check=false
#dubbo.registry.check=false